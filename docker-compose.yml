version: '3.8'  # Verze Docker Compose, která specifikuje verzi syntaxe a funkcí, které budou použity

services:
  flask:  # Název služby, která bude provozovat Flask aplikaci
    container_name: web_flask  # Název kontejneru, který bude vytvořen
    build:  # Definice pro sestavení Docker obrazu
      context: ./app  # Adresář, ve kterém Docker hledá Dockerfile a další soubory potřebné pro sestavení
      dockerfile: Dockerfile_flask  # Název Dockerfile, který bude použit pro sestavení obrazu
    expose:
      - "5000"  # Port, na kterém bude aplikace naslouchat uvnitř kontejneru, není přesměrován na hostitelský systém
    volumes:
      - ./app:/usr/src/app  # Mapování místního adresáře `./app` do `/usr/src/app` v kontejneru
    environment:
      FLASK_APP: run.py  # Určuje, který soubor Flask aplikace bude spuštěn
      FLASK_RUN_HOST: 0.0.0.0  # Nastavuje Flask aplikaci tak, aby byla dostupná zvenčí kontejneru
    networks:
      - my_network  # Síť, na které bude služba běžet

  gunicorn:
    container_name: gunicorn  # Název kontejneru pro Gunicorn server
    build:
      context: ./app  # Adresář pro sestavení obrazu
      dockerfile: Dockerfile_gunicorn  # Název Dockerfile pro Gunicorn
    command: ["gunicorn", "--bind", "0.0.0.0:8000", "run:app"]  # Příkaz, který spustí Gunicorn server na portu 8000
    depends_on:
      - flask  # Gunicorn závisí na službě `flask`, která musí být spuštěna dříve

  nginx:
    container_name: nginx  # Název kontejneru pro Nginx
    build:
      context: ./nginx  # Adresář pro sestavení Nginx obrazu
      dockerfile: Dockerfile_nginx  # Název Dockerfile pro Nginx
    ports:
      - "80:80"  # Mapování portu 80 v kontejneru na port 80 na hostitelském systému
    volumes:
      - ./nginx/nginx.conf:/etc/nginx/nginx.conf  # Mapování konfiguračního souboru Nginx z místního systému do kontejneru
    depends_on:
      - gunicorn  # Nginx závisí na službě `gunicorn`, která musí být spuštěna dříve

  db:
    image: mysql:8.0  # Použití oficiálního MySQL obrazu verze 8.0
    container_name: mysql  # Název kontejneru pro MySQL
    environment:
      MYSQL_ROOT_PASSWORD: root_password  # Heslo pro root uživatele MySQL
      MYSQL_DATABASE: my_database  # Název databáze, která bude vytvořena
      MYSQL_USER: my_user  # Uživatelské jméno pro nového MySQL uživatele
      MYSQL_PASSWORD: my_password  # Heslo pro nového MySQL uživatele
    ports:
      - "3306:3306"  # Mapování portu 3306 v kontejneru na port 3306 na hostitelském systému
    volumes:
      - db_data:/var/lib/mysql  # Persistentní úložiště pro data MySQL, aby byla data uchována i po odstranění kontejneru
    networks:
      - my_network  # Síť, na které bude služba běžet

  adminer:
    image: adminer  # Použití oficiálního Adminer obrazu pro správu databází
    container_name: adminer  # Název kontejneru pro Adminer
    ports:
      - "8080:8080"  # Mapování portu 8080 v kontejneru na port 8080 na hostitelském systému
    networks:
      - my_network  # Síť, na které bude služba běžet

  mkdocs:
    container_name: mkdocs  # Název kontejneru pro MkDocs
    build:
      context: ./mkdocs  # Adresář pro sestavení obrazu MkDocs
      dockerfile: Dockerfile_mkdocs  # Název Dockerfile pro MkDocs
    ports:
      - "8005:8000"  # Mapování portu 8000 v kontejneru na port 8005 na hostitelském systému
    volumes:
      - ./mkdocs:/usr/src/mkdocs # Adresář v projektu mkdocs mapuje do pracovního adresáře v kontejneru do /mkdocs. Zmeny se projevuji ihned!
      #- plantuml_data:/usr/src/mkdocs/docs/diagrams
    stdin_open: true  # Umožňuje interakci s kontejnerem přes standardní vstup
    tty: true  # Poskytuje pseudo-terminál (tty) pro kontejner
    networks:
      - my_network


  plantuml:
    image: plantuml/plantuml-server:v1.2024.5
    container_name: plantuml-server
    ports:
      - "8081:8080"
   # volumes:
    #  - plantuml_data:/data
    stdin_open: true  # Umožňuje interakci s kontejnerem přes standardní vstup
    tty: true  # Poskytuje pseudo-terminál (tty) pro kontejner
    networks:
      - my_network


volumes:
  db_data:
    # Definice persistentního úložiště pro MySQL databázi
    # Data budou uchována i po odstranění kontejneru
    # Data budou uložena v adresáři: /var/lib/docker/volumes/db_data/_data
#  plantuml_data:

networks:
  my_network:  # Definice vlastní sítě pro komunikaci mezi kontejnery
    driver: bridge  # Používá výchozí síťový ovladač `bridge` pro izolaci a komunikaci mezi kontejnery